#!/bin/bash

# Colors
RED='\033[1;31m'
GREEN='\033[1;32m'
PURPLE='\033[1;35m'
YELLOW='\033[1;33m'


# API
API='https://api.ssllabs.com/api/v3'

echo "                  "


#Header
echo -e "${PURPLE}             _   _               ____  ____   _     "
echo -e "${PURPLE}            | | | |  ___   _ __ / ___|/ ___| | |    "
echo -e "${PURPLE}            | |_| | / _ \ | '_ \\___ \\___ \ | |    "
echo -e "${PURPLE}            |  _  || (_) || |_) |___) |___) || |___ "
echo -e "${PURPLE}            |_| |_| \___/ | .__/|____/|____/ |_____|"
echo -e "${PURPLE}                          |_|                       "


echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⡴⠚⠋⢹⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠖⠋⠁⠀⠀⠀⢸⠃⠀⠀⠀⣠⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"⠀
echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⠀⠀⠀⠀⠀⢠⠟⠀⣀⡴⠋⡁⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"⠀⠀
echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠃⣰⠀⠀⠀⠀⠀⣠⢏⡤⠞⢁⡴⠋⠀⠀⡇⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀"⠀⠀
echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣧⠀⡇⠀⠀⠀⠀⣴⠿⠋⣠⠞⠁⠀⠀⠀⣸⠛⠛⠛⠛⠲⢦⣄⡀⠀⠀⠀⠀⠀"
echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⠖⠻⣦⡧⠀⠀⣤⠞⠁⣠⠞⠁⠀⠀⠀⣀⡴⠃⠀⠀⠀⠀⠀⠀⠈⠙⢦⡀⠀⠀⠀"
echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⠏⠀⠀⠀⠀⠃⠀⠀⠀⠀⠀⣿⣤⣤⡴⠶⠞⠻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⡄⠀⠀"
echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣆⠀"
echo -e "${PURPLE}⠀⠀⣠⣶⣤⣀⡀⠀⠀⠀⠀⠀⢠⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⡤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡀"
echo -e "${PURPLE}⠀⠀⢿⣄⠈⠁⣽⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣇"
echo -e "${PURPLE}⠀⠀⠈⠛⠓⠚⠋⠀⠀⠀⠀⠀⢸⡇⢰⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿"
echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠘⣷⠘⣿⣿⠅⠀⢷⡴⠀⠀⠀⠀⠘⣿⣿⡇⠈⣳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇"
echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠤⠒⢲⡟⠃⠈⠁⠀⠀⠈⠁⠀⠀⠀⠀⠀⠙⠋⠣⠼⢛⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇"
echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢷⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⠇"
echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢯⠙⠛⠒⠖⠚⠛⠛⠷⠦⠤⠤⠤⠴⠋⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⠏⠀"
echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠾⠋⠀⠀"
echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣻⣦⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡶⣿⠀⢀⣉⡏⠀⠀⠀"⠀⠀
echo -e "${PURPLE}⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠙⠛⠛⠚⠉⠉⠙⠛⠛⠛⠛⠛⠓⠚⠛⠋⠙⠓⠛⠒⠓⠋⠀⠀  ${PURPLE}https://github.com/suraei/hopSSL\n"
echo -e "${PURPLE}------------------------------------------------------------------------------------------"




# Get the options
while getopts "ht:" OPTION; do
   case "$OPTION" in
      h) # display Help
         echo -e "${GREEN}Usage: ./hopssl -t <URL>|<list>"
         exit;;
      t) # Enter the target
         TARGET="$OPTARG";;
     \?) # Invalid option
         echo -e "[!] Error: Invalid option"
         exit;;
   esac

done

# Check Target
HOSTLIST="$(mktemp)"
if test -z "${TARGET}"; then
  echo -e "${GREEN}Specify the target(s) with -t "
  exit 1

elif test -f "${TARGET}"; then
  sed -e '/^$/d' -e '/^#/d' "${TARGET}" | sort -u > "${HOSTLIST}"

else
  echo -e "${TARGET}" > "${HOSTLIST}"

fi



# Main Function
mkdir -p results
while read -r host; 

do
    FILE=$(mktemp)
    aux=$(mktemp)

    IP=$(curl --silent "$API/analyze?host=${host}&done=all" | jq '.endpoints[0] .ipAddress' | sed -e 's/^"//' -e 's/"$//')

    
    
    echo -e "${PURPLE}[*] Scanning ${YELLOW}$host"

    until [ "$STATUS" = '"READY"' ];

    do
        PROGRESS=$(curl --silent "$API/analyze?host=${host}&done=all" | jq '.endpoints[0] .progress' | sed -e 's/^"//' -e 's/"$//')
        STATUS=$(curl --silent "$API/analyze?host=${host}&done=all" | jq '.status')
        if [ ${PROGRESS} != null ]; 
            then echo "[*] Progress: $PROGRESS % "
        fi
        

        if [ "${STATUS}" = '"ERROR"' ]; then
            echo -e "${RED}[!] ERROR: $(curl --silent "$API/analyze?host=${host}&done=all" | jq '.statusMessage')"
            #echo "${RED}[!] Stoping script"
            #exit 1
            break
        fi   

    done

    if [ "${STATUS}" = '"READY"' ]; then

        echo -e "${PURPLE}[*] The url is ready"

        curl --silent "$API/analyze?host=${host}&s=${IP}&done=on&all=on" > FILE
        echo "${host}-------------------------------" >> jsontest
        curl --silent "$API/analyze?host=${host}&s=${IP}&done=on&all=on" >> jsontest

        #Connection test
        cat FILE | jq '.endpoints[0].statusMessage' > aux  

        if grep -q "Ready" aux; then

            #Protocols
            echo -e "${GREEN}[*] Testing Weak Protocols"
            cat FILE | jq '.endpoints[0].details .protocols[].version' | grep -q "1.0" && echo -e "${RED}   [!] TLS 1.0 Weak Protocol" && echo -e $host >> results/weak_protocol_1.0.txt
            cat FILE | jq '.endpoints[0].details .protocols[].version' | grep -q "1.1" && echo -e "${RED}   [!] TLS 1.1 Weak Protocol" && echo -e $host >> results/weak_protocol_1.1.txt

            #Ciphers
            echo -e "${GREEN}[*] Testing Weak Cipher Suites Supported"
            cat FILE | jq '.endpoints[0].details .suites[].list[].q' | grep -q "1\|0" && echo -e "${RED}   [!] Weak Cipher Suites Supported" && echo -e $host >> results/weak_cipher_suites.txt

            echo -e "${GREEN}[*] Testing Forward Secrecy"
            cat FILE | jq '.endpoints[0].details .forwardSecrecy' > aux
            test -z aux && echo -e "${RED}   [!] No Forward Secrecy" && echo -e $host >> results/no_forward_secrecy.txt

            #CertificateChain 
            echo -e "${GREEN}[*] Testing Certificate Common Name Mismatch"
            cat FILE | jq '.certs[].issues' | grep -q "8" && echo -e "${RED}   [!] Certificate Common Name Mismatch" && echo -e $host >> results/cert_common_name_mismatch.txt

            echo -e "${GREEN}[*] Testing Certificate Revoked"
            cat FILE | jq '.certs[].issues' | grep -q "16" && echo -e "${RED}   [!] Certificate Revoked" && echo -e $host >> results/cert_revoked.txt

            #HTTP
            echo -e "${GREEN}[*] Testing Missing HTTP Strict Transport Security Policy"
            cat FILE | jq '.endpoints[0].details.hstsPolicy .status' | grep -q "absent"  && echo -e "${RED}   [!] Missing HTTP Strict Transport Security Policy" && echo -e $host >> results/missing_http_strict_transport.txt

            echo -e "${GREEN}[*] Testing HTTP Header Information Disclosure"
            cat FILE | jq '.endpoints[0].details .serverSignature' > aux
            test -z aux && echo -e "${RED}  [!] HTTP Header Information Disclosure" && echo -e $host >> results/header_information_disclosure.txt

            
            
        else

            echo -e "${RED}[!] Failed Connection"
            

        fi




    fi

    echo -e "------------------------------------------------------------------------------------------"
    
        
    



done < $HOSTLIST






